{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('#start-button');\nconst timerFields = {\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]')\n};\n\nlet userSelectedDate = null;\nlet timerInterval = null;\n\nflatpickr(datetimePicker, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    \n    userSelectedDate = selectedDates[0];\n    \n    if (userSelectedDate && userSelectedDate > new Date()) {\n      startButton.disabled = false;\n    } else {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    }\n  }\n});\n\nconst addLeadingZero = (value) => {\n  return value.toString().padStart(2, '0');\n};\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n\nconst updateTimer = () => {\n  const now = new Date();\n  const timeLeft = userSelectedDate - now;\n\n  if (timeLeft <= 0) {\n    clearInterval(timerInterval);\n    Object.values(timerFields).forEach(field => field.textContent = '00');\n    startButton.disabled = false;\n    datetimePicker.disabled = false;\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(timeLeft);\n  timerFields.days.textContent = addLeadingZero(days);\n  timerFields.hours.textContent = addLeadingZero(hours);\n  timerFields.minutes.textContent = addLeadingZero(minutes);\n  timerFields.seconds.textContent = addLeadingZero(seconds);\n};\n\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(updateTimer, 1000);\n});\n\n\nupdateTimer();"],"names":["datetimePicker","startButton","timerFields","userSelectedDate","timerInterval","flatpickr","selectedDates","iziToast","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","updateTimer","timeLeft","field"],"mappings":"2GAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,eAAe,EACpDC,EAAc,CAClB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEA,IAAIC,EAAmB,KACnBC,EAAgB,KAEpBC,EAAUL,EAAgB,CACxB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQM,EAAe,CAErBH,EAAmBG,EAAc,CAAC,EAE9BH,GAAoBA,EAAmB,IAAI,KAC7CF,EAAY,SAAW,IAEvBM,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDN,EAAY,SAAW,GAE1B,CACH,CAAC,EAED,MAAMO,EAAkBC,GACfA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,EAGzC,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,MAAMC,EAAc,IAAM,CAExB,MAAMC,EAAWd,EADL,IAAI,KAGhB,GAAIc,GAAY,EAAG,CACjB,cAAcb,CAAa,EAC3B,OAAO,OAAOF,CAAW,EAAE,QAAQgB,GAASA,EAAM,YAAc,IAAI,EACpEjB,EAAY,SAAW,GACvBD,EAAe,SAAW,GAC1B,MACD,CAED,KAAM,CAAE,KAAAY,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUO,CAAQ,EAC5Df,EAAY,KAAK,YAAcM,EAAeI,CAAI,EAClDV,EAAY,MAAM,YAAcM,EAAeK,CAAK,EACpDX,EAAY,QAAQ,YAAcM,EAAeM,CAAO,EACxDZ,EAAY,QAAQ,YAAcM,EAAeO,CAAO,CAC1D,EAGAd,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BI,EAAgB,YAAYY,EAAa,GAAI,CAC/C,CAAC,EAGDA,EAAa"}